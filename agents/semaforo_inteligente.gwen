// ----------------------------------------------------------------------------
// Copyright (C) 2014 Louise A. Dennis and Michael Fisher
// 
// This file is part of Gwendolen
//
// Gwendolen is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// Gwendolen is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with Gwendolen if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//----------------------------------------------------------------------------

GWENDOLEN

:name: agMediador

:Initial Beliefs:
qtdIteracaoContractNet(0)

:Initial Goals:
ligar[perform]

:Plans:

+!ligar [perform]: {True} <- 
	print("Sistema iniciado"),
	ligar;

+fimTurno: {True} <- 
	+!achieveFimTurno [achieve];

+!achieveFimTurno [achieve]: {True} <-
	.send(agSemaforo1, :perform, pensarDecisao),
	.send(agSemaforo2, :perform, pensarDecisao),
	+!pensarDecisaoMediador [perform],
	print("Sistema reiniciado"),
	ligar;
	
+.received(:tell, B): {True} <- +B; 
+.received(:perform, G): {True} <- +!G [perform]; 
+.received(:achieve, G): {True} <- +!G [achieve]; 

+!pensarDecisaoMediador[perform]: {True} <-
   	mediar;

+impasse: {True} <- 
	mediar;







:name: agSemaforo1

:Initial Beliefs:

:Initial Goals:

:Plans:

+.received(:tell, B): {True} <- +B; 
+.received(:perform, G): {True} <- +!G [perform]; 
+.received(:achieve, G): {True} <- +!G [achieve]; 

+!pensarDecisao [perform]: {True} <-
	ponderar;

:name: agSemaforo2

:Initial Beliefs:

:Initial Goals:

:Plans:

+.received(:tell, B): {True} <- +B; 
+.received(:perform, G): {True} <- +!G [perform]; 
+.received(:achieve, G): {True} <- +!G [achieve]; 

+!pensarDecisao [perform]: {True} <-
	ponderar;